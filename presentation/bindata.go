// Code generated by go-bindata.
// sources:
// templates/reveal.html
// templates/shower.html
// DO NOT EDIT!

package presentation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRevealHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xb1\x4f\xeb\x30\x10\xc6\xf7\xfe\x15\x7e\x9e\xde\x1b\x9e\x8d\xca\x82\xc0\xc9\x52\x90\x18\x40\x20\xe8\xc2\xe8\x24\xd7\xf8\x8a\xe3\x54\xf6\xb5\xa8\x89\xf2\xbf\xe3\x26\x69\x54\x06\x26\xe8\xf6\xc5\x5f\xce\xbf\xef\xee\x12\xf5\xe7\xf6\x69\xb1\x7c\x7b\xbe\x63\xf7\xcb\xc7\x87\x74\xa6\x0c\x55\x96\x59\xed\xca\x84\x83\xe3\xe9\x8c\x31\x65\x40\x17\x07\x11\x65\x05\xa4\x59\x6e\xb4\x0f\x40\x09\xdf\xd2\xea\xff\x15\x1f\x2d\x8b\xee\x9d\x79\xb0\x09\x0f\xb4\xb7\x10\x0c\x00\x71\x66\x3c\xac\x12\x6e\x88\x36\xe1\x5a\x4a\x5d\xd6\xae\xd1\x16\x1a\x5f\x8b\x12\xc9\x6c\x33\x81\xb5\xac\x8a\x79\xb0\x58\x40\x90\x16\xb3\x20\x3d\xec\x40\x5b\x79\x29\xe6\xe2\x42\xe6\xe1\x78\x20\xa2\x3c\x3f\x8b\x0c\x54\x20\x3f\x0c\x12\x9c\x1f\x18\x4f\x7a\x68\x03\x2e\xdb\x7a\x37\x01\x95\x1c\x46\x7e\x90\x59\x5d\xec\xc7\x10\x05\xee\x58\x6e\x75\x08\x09\x1f\xae\x19\xd3\x7d\xb5\x06\xda\x64\x31\xd6\xb6\x3e\xae\x13\x98\x78\xed\x9d\xae\x9b\x1c\x15\x20\x27\xac\x5d\xda\xb6\xa2\xeb\x94\x3c\x3e\x9e\x94\x82\x2b\xa6\x02\x25\x23\x66\xcc\x32\xc8\x41\x87\xdc\xe3\x86\x58\xf0\xf9\x4f\x87\xb1\x0e\x7d\xe7\xa2\x42\x27\xd6\xb1\x87\x18\xa9\xbf\x3b\xfd\x4d\xd0\x7a\xfa\xa2\xbe\x45\xa4\x2f\xc3\x0b\xe8\x90\x50\x5b\x6c\xe0\x6f\x1c\xd1\xa2\x76\x2b\x2c\xbb\xee\xdf\xcd\x69\x91\x92\xc3\x8a\xe2\xd2\xe2\xaf\x93\xce\x3e\x03\x00\x00\xff\xff\x90\x35\x17\xbc\x52\x03\x00\x00")

func templatesRevealHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRevealHtml,
		"templates/reveal.html",
	)
}

func templatesRevealHtml() (*asset, error) {
	bytes, err := templatesRevealHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reveal.html", size: 850, mode: os.FileMode(420), modTime: time.Unix(1450095273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesShowerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x51\xcb\x92\xd5\x20\x10\x5d\xcf\xfd\x0a\x64\x6d\x60\x26\x0b\x5f\x05\xd9\xa8\x55\x2e\xb4\xb4\xca\xd9\xb8\x24\xa4\x27\xa0\x04\x22\xdd\xb9\xaf\x54\xfe\x5d\x92\x58\x57\xf7\xb3\xa4\xcf\xa3\xfb\x1c\xd4\x8b\x0f\x5f\xdf\x3f\xfe\xf8\xf6\x91\x7d\x7a\xfc\xf2\xb9\x39\x28\x47\x43\x60\xc1\xc4\x5e\x73\x88\x7c\x1d\x80\xe9\x9a\xc3\x9d\x1a\x80\x0c\xb3\xce\x64\x04\xd2\x7c\xa2\xa7\xea\x0d\xbf\xcd\xa3\x19\x40\xf3\xa3\x87\xd3\x98\x32\x71\x66\x53\x24\x88\x85\x77\xf2\x1d\x39\xfd\xfa\x6d\xfd\x92\x4d\x08\xb9\x42\x6b\x82\x69\x03\xe8\x98\xfe\xa9\x1d\xd1\x58\xc1\xef\xc9\x1f\x35\x3f\x57\x93\xa9\x6c\x1a\x46\x43\xbe\xf0\xfe\xb3\xf2\xa0\xa1\xeb\x61\x93\x05\x1f\x7f\xb1\x0c\x41\x73\xa4\x4b\x00\x74\x00\x65\xab\xcb\xf0\xa4\xf9\xea\x86\xef\xa4\x34\x7d\x8a\x57\x13\xe0\x9a\x93\xe8\x3d\xb9\xa9\x15\x3e\xc9\xa1\xab\x31\xf8\x0e\x50\x06\xdf\xa2\x44\x97\x4e\x90\x65\x2d\xee\x45\x2d\xc9\xc1\x50\x80\xec\xdb\x36\x45\xb9\x3b\x4b\xb4\x19\x20\x56\x0f\xaf\xce\x0f\xf7\xc2\x22\xae\x9d\xc8\xbd\x14\xd5\xa6\xee\xc2\x6c\x30\x88\xe5\x90\xcd\x89\x05\x8f\x54\x28\x8c\xcd\x73\x2e\x2d\x02\x13\xdf\xb7\x75\xcb\x52\x66\x8c\x29\x04\x4b\x3e\xc5\x9b\x6a\x05\x79\x33\xcf\x62\x59\x94\xfc\x0b\xee\x72\x88\x5d\x11\xdd\xa9\x72\x80\x1f\x89\x61\xb6\xcf\xc9\xb6\x3f\xc4\xe0\xa3\xf8\x59\x32\x28\xb9\xdb\xae\x61\xd6\x14\x5b\xa8\xf2\xf5\xcd\xe1\x4f\x00\x00\x00\xff\xff\x6c\xfa\x5d\x71\x12\x02\x00\x00")

func templatesShowerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesShowerHtml,
		"templates/shower.html",
	)
}

func templatesShowerHtml() (*asset, error) {
	bytes, err := templatesShowerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/shower.html", size: 530, mode: os.FileMode(420), modTime: time.Unix(1450091419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/reveal.html": templatesRevealHtml,
	"templates/shower.html": templatesShowerHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"reveal.html": &bintree{templatesRevealHtml, map[string]*bintree{}},
		"shower.html": &bintree{templatesShowerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

