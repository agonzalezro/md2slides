// Code generated by go-bindata.
// sources:
// templates/reveal.html
// DO NOT EDIT!

package presentation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRevealHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\xc1\x4e\xec\x30\x0c\xbc\xbf\xaf\x88\x72\x7a\x1c\x48\xee\x90\xf6\x23\xe0\x0b\xd2\xc4\x10\x6f\xdd\xec\x2a\x0e\x2b\xed\x56\xfd\x77\xd2\xa4\x54\xcb\x01\x09\x04\xa7\x8e\x3b\xf6\xcc\xd8\xad\x09\x79\xa2\xfe\x9f\x10\x26\x80\xf5\x2b\x28\x90\x30\x8e\x22\x01\x75\x92\xf3\x85\x80\x03\x40\x96\x22\x24\x78\xe9\x64\xc8\xf9\xf4\xa0\x35\xd9\x41\x05\x3b\xe2\xa4\x18\x74\x82\x33\x58\xba\x3f\xb0\x76\xcc\x5b\xa5\x0a\x94\x7f\xa2\x97\x03\x4c\xa0\x07\xb2\x6e\xac\xa2\x02\x7d\x27\xeb\xcb\xdf\xeb\x13\x0e\xd5\xe3\x0a\x71\x78\x4b\x71\x0f\x6d\x74\x3b\xc7\x0a\x87\xa3\xbf\x6c\x46\x1e\xcf\xc2\x91\x65\xee\x64\xd3\xd8\x12\x7c\xa6\x98\xd0\x03\xef\x94\x10\xf3\x9c\x6c\x7c\x05\xa1\x9e\x2b\xb3\x2c\x3b\x63\x18\x5c\xc6\x63\xec\xe7\x59\x2d\x8b\xd1\x1f\xe5\xcd\x28\x44\xbf\x0f\x18\x5d\x6c\xb6\x2c\x0d\x36\xcc\x2e\xe1\x29\x0b\x4e\xee\x3b\x0b\x97\xc7\xba\x9d\x9a\x30\xaa\x43\xc9\x59\x6c\xeb\x7c\xff\x53\xb1\xc3\xfe\xb1\xbf\x94\xe9\x9f\x5a\x03\x46\xcc\x68\x09\xaf\xf0\x7f\x5e\xee\x1e\x6f\x7b\x8d\x6e\x17\x2e\x37\xaf\xff\xe2\x7b\x00\x00\x00\xff\xff\xbe\x4d\x84\xff\x93\x02\x00\x00")

func templatesRevealHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRevealHtml,
		"templates/reveal.html",
	)
}

func templatesRevealHtml() (*asset, error) {
	bytes, err := templatesRevealHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reveal.html", size: 659, mode: os.FileMode(420), modTime: time.Unix(1449335562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/reveal.html": templatesRevealHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"reveal.html": &bintree{templatesRevealHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

