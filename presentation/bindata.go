// Code generated by go-bindata.
// sources:
// templates/remark.tmpl
// templates/reveal.tmpl
// templates/shower.tmpl
// DO NOT EDIT!

package presentation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRemarkTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x5b\x93\xd2\x30\x14\x7e\xdf\x5f\x71\x96\x17\xd6\x05\x9a\xf5\x32\xa3\x03\x2d\xea\x2c\xeb\x0c\x23\x82\xb3\xd6\x71\xf6\x31\xb4\xa7\x6d\x34\x4d\x98\xe4\x54\x44\x86\xff\x6e\x4a\x1a\x74\xd5\x37\x1e\xd2\x9c\xeb\x77\x2e\xf9\x1a\x5f\xce\x56\xb7\xe9\xc3\xc7\x3b\xa8\xa8\x96\xd3\x8b\xd8\x5f\x00\x71\x85\x3c\x6f\x05\x27\x92\x20\x89\xd3\xb4\xfd\xc6\xcc\x2b\xde\x51\x23\x71\xc8\x2a\x6e\x2c\x52\xd2\x6b\xa8\x18\xbd\xea\x75\x2e\x4b\xbb\x10\x06\xf0\x46\xd4\x1b\x6d\x08\x1a\x23\xaf\x2a\xa2\x8d\x1d\x33\x56\x68\x45\x36\x2a\xb5\x2e\x25\xf2\x8d\xb0\x51\xa6\x6b\x96\x59\xfb\xba\xe0\xb5\x90\xbb\xe4\x81\x2b\xad\x70\xf0\x9e\x17\x05\xa2\xe5\xf4\xf3\xc9\xe4\x0c\xb4\x99\xd1\x22\x1f\x7c\x42\x23\x8a\xf1\x8b\x9b\x9b\xe1\x4b\x77\xdc\x2d\x88\x4b\x91\x9d\x85\xfc\x79\xdd\x28\x6a\x06\x1f\xb4\xd2\xff\x45\xee\xa0\xd7\x3a\xdf\xc1\x1e\x5a\xb4\x91\xcf\x1c\x43\xff\xd8\x15\x1c\xbb\xea\x4f\xe0\xd0\x85\x56\x4f\x87\x50\x3d\x73\xe7\x39\xec\x3b\x13\xfc\x95\xe8\x97\x03\xbf\x97\xd3\x9f\x3c\x8e\xdc\xa2\x28\x2b\x1a\x83\xd2\xa6\xe6\x32\x38\x43\x85\xc8\x60\xcd\xcd\xb7\x51\xa6\x73\x1c\x9e\x34\xa1\xa4\x50\x78\x34\xfe\xd3\xa9\x9f\x12\xda\x29\x4f\x9d\xc6\xec\xf4\xc8\x31\x0b\x74\x89\xdb\x41\x03\x6f\xf0\x07\x71\x83\x1c\x44\x9e\xf4\xac\x6e\x4c\x86\x8e\x1e\xfb\x3d\xbb\x86\xd9\x0a\x96\xab\x14\xe6\xcb\xd9\xdd\x32\x85\xd5\x3d\xcc\x53\xf8\x32\x5f\x2c\xe0\xdd\xdb\xf9\xe2\x12\xae\xd9\xe1\xe0\x02\xa3\x5b\xad\x0a\x51\x7a\xf9\x9e\x6f\x9d\x4a\xa8\xe8\x10\xea\x87\x02\x81\x73\x99\x11\x1b\x02\x6b\xb2\xa4\x17\x9e\xaf\x54\x7c\x1d\x95\x82\xaa\x66\x1d\x09\xcd\xfc\xa8\x2c\xd7\x5b\x25\x35\xcf\x6d\x67\x18\x49\x4e\x68\x29\xaa\x85\x8a\xbe\xda\xc0\x61\xe6\x01\x1f\xa1\x4f\x2f\xbe\x73\x03\x56\x8a\x1c\x6d\xa5\xb7\x90\x80\x47\x88\x32\xd7\x07\xe1\x55\xc7\xa5\x3f\x73\x63\xe6\x77\xe2\x96\x74\xfc\xb9\x7e\x05\x00\x00\xff\xff\x9d\x39\x8e\x1a\x74\x03\x00\x00")

func templatesRemarkTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRemarkTmpl,
		"templates/remark.tmpl",
	)
}

func templatesRemarkTmpl() (*asset, error) {
	bytes, err := templatesRemarkTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/remark.tmpl", size: 884, mode: os.FileMode(420), modTime: time.Unix(1451336135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRevealTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xb1\x4f\xeb\x30\x10\xc6\xf7\xfe\x15\x7e\x9e\xde\x1b\x9e\x8d\xca\x82\xc0\xc9\x52\x90\x18\x40\x20\xe8\xc2\xe8\x24\xd7\xf8\x8a\xe3\x54\xf6\xb5\xa8\x89\xf2\xbf\xe3\x26\x69\x54\x06\x26\xe8\xf6\xc5\x5f\xce\xbf\xef\xee\x12\xf5\xe7\xf6\x69\xb1\x7c\x7b\xbe\x63\xf7\xcb\xc7\x87\x74\xa6\x0c\x55\x96\x59\xed\xca\x84\x83\xe3\xe9\x8c\x31\x65\x40\x17\x07\x11\x65\x05\xa4\x59\x6e\xb4\x0f\x40\x09\xdf\xd2\xea\xff\x15\x1f\x2d\x8b\xee\x9d\x79\xb0\x09\x0f\xb4\xb7\x10\x0c\x00\x71\x66\x3c\xac\x12\x6e\x88\x36\xe1\x5a\x4a\x5d\xd6\xae\xd1\x16\x1a\x5f\x8b\x12\xc9\x6c\x33\x81\xb5\xac\x8a\x79\xb0\x58\x40\x90\x16\xb3\x20\x3d\xec\x40\x5b\x79\x29\xe6\xe2\x42\xe6\xe1\x78\x20\xa2\x3c\x3f\x8b\x0c\x54\x20\x3f\x0c\x12\x9c\x1f\x18\x4f\x7a\x68\x03\x2e\xdb\x7a\x37\x01\x95\x1c\x46\x7e\x90\x59\x5d\xec\xc7\x10\x05\xee\x58\x6e\x75\x08\x09\x1f\xae\x19\xd3\x7d\xb5\x06\xda\x64\x31\xd6\xb6\x3e\xae\x13\x98\x78\xed\x9d\xae\x9b\x1c\x15\x20\x27\xac\x5d\xda\xb6\xa2\xeb\x94\x3c\x3e\x9e\x94\x82\x2b\xa6\x02\x25\x23\x66\xcc\x32\xc8\x41\x87\xdc\xe3\x86\x58\xf0\xf9\x4f\x87\xb1\x0e\x7d\xe7\xa2\x42\x27\xd6\xb1\x87\x18\xa9\xbf\x3b\xfd\x4d\xd0\x7a\xfa\xa2\xbe\x45\xa4\x2f\xc3\x0b\xe8\x90\x50\x5b\x6c\xe0\x6f\x1c\xd1\xa2\x76\x2b\x2c\xbb\xee\xdf\xcd\x69\x91\x92\xc3\x8a\xe2\xd2\xe2\xaf\x93\xce\x3e\x03\x00\x00\xff\xff\x90\x35\x17\xbc\x52\x03\x00\x00")

func templatesRevealTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRevealTmpl,
		"templates/reveal.tmpl",
	)
}

func templatesRevealTmpl() (*asset, error) {
	bytes, err := templatesRevealTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reveal.tmpl", size: 850, mode: os.FileMode(420), modTime: time.Unix(1450095273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesShowerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\xcb\x6e\xdb\x30\x10\x3c\x27\x5f\xb1\x65\x72\xb4\x44\xd9\x85\x9b\x54\x15\x0d\x14\x6d\x80\x1e\xfa\x08\x10\x5f\x7a\xa4\xa8\xb5\xb4\x2d\x45\x2a\x24\xfd\x48\x0c\xfd\x7b\xa9\x47\xd2\xde\x7b\x10\xa0\x9d\xd9\x99\x5d\xed\xa8\x78\xf3\xf9\xc7\xa7\xed\xcf\xfb\x3b\xf8\xb2\xfd\xf6\x75\x73\x59\x34\xa1\xd5\xa0\xa5\xa9\x05\x43\xc3\x06\x00\x65\xb5\xb9\xbc\x28\x5a\x0c\x12\x54\x23\x9d\xc7\x20\xd8\x3e\xec\x92\x5b\xf6\x8a\x1b\xd9\xa2\x60\x07\xc2\x63\x67\x5d\x60\xa0\xac\x09\x68\x62\xdf\x91\xaa\xd0\x88\x9b\xf7\xab\x05\xec\x3d\xba\xc4\x2b\xa9\x65\xa9\x51\x18\xfb\x57\xdd\x84\xd0\x25\xf8\xb8\xa7\x83\x60\xa7\x64\x2f\x13\x65\xdb\x4e\x06\x8a\x7d\xff\x58\x11\x0a\xac\x6a\x1c\x65\x9a\xcc\x6f\x70\xa8\x05\xf3\xe1\x49\xa3\x6f\x10\xe3\xd4\xc6\xe1\x4e\xb0\xc1\xcd\xe7\x9c\xcb\xda\x9a\x67\xa9\xf1\xd9\xd9\xb4\xa6\xd0\xec\xcb\x94\x2c\x6f\xab\x95\xd7\x54\xa1\xe7\x9a\x4a\xcf\x7d\x63\x8f\xe8\xf8\x2a\xcd\xd2\x15\x0f\x0d\xb6\x91\x70\x54\x96\xd6\xf0\xc9\x99\x7b\xe5\x10\x4d\xb2\x7c\x77\x5a\x66\xa9\xf2\x7e\xb8\x09\x9f\x8e\x52\x94\xb6\x7a\x02\xa5\xa5\xf7\x71\x91\xd1\x09\x34\xf9\x10\x5b\x00\xce\x67\x17\xaf\x88\x70\x4d\xa6\xc2\xd3\x02\xae\xc7\xb1\x90\x0b\x48\x1f\xc6\x05\xfa\x3e\x76\x15\x1e\x55\x20\x6b\x5e\x5d\x06\x8a\x45\x31\xd0\x0e\xf0\x71\x56\x43\x06\x7d\x4f\x95\x60\xca\x1e\xd0\xb1\xc8\xa2\xa9\x22\xb4\x39\x9f\xd3\xbe\x2f\xf8\x6c\x32\x8d\x8d\xd4\x6c\x3d\x7c\xc0\x80\x01\x5c\x8d\x42\x68\x96\x70\x1e\x6b\x80\x56\xba\x9a\x4c\xfe\x36\xeb\x06\xf7\xec\xc3\x0c\x2b\xab\xad\xcb\xe1\x6a\x7d\xbb\xfe\xb8\xbe\x7b\x41\x03\x9e\x42\x22\x35\xd5\x26\x57\x31\x0b\x74\x2f\xc4\x2e\x86\x93\xc3\x4d\x96\xc5\xa7\x3b\xf1\x25\xdc\x6f\xe1\x41\x1a\x0f\xdf\xa5\x73\xf6\xb8\xf0\xf1\x3d\x89\xb9\xd3\x6e\x52\x8c\x7b\xf1\x79\xb1\x8b\x22\xde\x96\xba\x00\xde\xa9\xff\x89\x6d\x2a\xd2\x96\x4c\xfa\x2b\xc6\x53\xf0\xc9\x76\xc8\x69\x08\x68\xcc\x2b\xfe\xd5\x9b\xcb\x3f\x01\x00\x00\xff\xff\xed\xc3\xc7\xf8\xed\x02\x00\x00")

func templatesShowerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesShowerTmpl,
		"templates/shower.tmpl",
	)
}

func templatesShowerTmpl() (*asset, error) {
	bytes, err := templatesShowerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/shower.tmpl", size: 749, mode: os.FileMode(420), modTime: time.Unix(1450172087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/remark.tmpl": templatesRemarkTmpl,
	"templates/reveal.tmpl": templatesRevealTmpl,
	"templates/shower.tmpl": templatesShowerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"remark.tmpl": &bintree{templatesRemarkTmpl, map[string]*bintree{}},
		"reveal.tmpl": &bintree{templatesRevealTmpl, map[string]*bintree{}},
		"shower.tmpl": &bintree{templatesShowerTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

