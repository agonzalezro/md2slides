// Code generated by go-bindata.
// sources:
// templates/reveal.html
// DO NOT EDIT!

package presentation

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRevealHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\xcd\x52\xc3\x20\x10\xbe\xfb\x14\x0c\x27\x3d\x08\x77\x25\xb9\xf8\x06\xfa\x04\x24\x6c\xcb\xa6\x84\x74\x58\xac\xd3\x66\x78\x77\x09\xc4\x4c\x3d\x38\xa3\x63\x4f\xf9\xc8\x97\xef\x67\x37\x28\x1b\x47\xd7\xde\x31\xa6\x2c\x68\xb3\x80\x0c\x1d\xfa\x03\x0b\xe0\x1a\x4e\xf1\xec\x80\x2c\x40\xe4\xcc\x06\xd8\x35\xdc\xc6\x78\x7c\x92\xd2\xe9\x4e\x58\x7d\xc0\x51\x10\xc8\x00\x27\xd0\xee\x71\x20\xd9\x13\xad\x27\x91\x21\xbf\x89\x5f\xb4\x30\x82\xfc\xb0\x18\xa1\x98\x32\x34\x0d\x2f\x2f\xff\xef\xef\xb0\x2b\x19\x17\xf0\xdd\x7b\xf0\x5b\x69\x25\xeb\x3a\x16\xd8\x4d\xe6\xbc\x06\x19\x3c\xb1\xde\x69\xa2\x86\x57\x8f\xb5\xc1\x77\x8a\x1c\x1a\xa0\x8d\x62\x6c\x9e\x83\xf6\x7b\x60\xe2\xad\x30\x29\x6d\x8c\x22\xe8\x23\x4e\xbe\x9d\x67\x91\x92\x92\x5f\xc7\x2b\x29\x78\xb3\x09\x94\xcc\x31\x6b\x97\x0a\x2b\xa6\x3e\xe0\x31\x32\x0a\xfd\x6f\x06\xce\x8f\x65\x3a\x31\xa2\x17\x43\xee\x99\x63\x8b\xbe\xfd\xab\xd9\xb0\xfd\xec\x1f\x6d\xda\xd7\xfa\x01\x7a\x8c\xa8\x1d\x5e\xe0\x3e\x8f\xfa\x32\xf9\x1d\xee\x53\x7a\x78\xbe\x16\x29\x59\x57\x9d\x97\x5f\x2e\xe5\x67\x00\x00\x00\xff\xff\xd1\xad\x2e\x76\x9c\x02\x00\x00")

func templatesRevealHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRevealHtml,
		"templates/reveal.html",
	)
}

func templatesRevealHtml() (*asset, error) {
	bytes, err := templatesRevealHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reveal.html", size: 668, mode: os.FileMode(420), modTime: time.Unix(1449700740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/reveal.html": templatesRevealHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"reveal.html": &bintree{templatesRevealHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

